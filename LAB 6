# Sample graph represented as an adjacency list
graph = {
    1: [2, 3],
    2: [4],
    3: [5, 6],
    4: [7],
    5: [8],
    6: [],
    7: [8],
    8: []
}

# Depth-Limited Search (DLS)
def dls(node, graph, goal, depth, visited):
    print(node, end=" ")
    
    if node == goal:
        return True
    
    if depth <= 0:
        return False
    
    visited.append(node)
    
    for neighbor in graph[node]:
        if neighbor not in visited:
            if dls(neighbor, graph, goal, depth - 1, visited):
                return True
    
    return False

# Iterative Deepening Search (IDS)
def ids(graph, start, goal, max_depth):
    for depth in range(max_depth + 1):
        visited = []
        print("\nDepth level:", depth)
        
        if dls(start, graph, goal, depth, visited):
            print("\nGoal found!")
            return
        
    print("\nGoal not found within depth limit.")

# Driver code
print("Following is the Iterative Deepening Search")
ids(graph, 1, 8, 3)
