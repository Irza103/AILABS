# Import libraries
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler, StandardScaler, OrdinalEncoder, OneHotEncoder
from sklearn.neural_network import MLPClassifier
from sklearn.metrics import accuracy_score, classification_report

# Load data
df = pd.read_csv("data.csv")
print("Number of data rows:", df.shape[0])

# Normalization
scaler = MinMaxScaler()
df['Present Price'] = scaler.fit_transform(df[['Present Price']])

# Standardization
standard_scaler = StandardScaler()
df[['Year', 'Kms Driven']] = standard_scaler.fit_transform(df[['Year', 'Kms Driven']])

# One Hot Encoding
one_hot_encoder = OneHotEncoder(sparse_output=False)
encoded_df = pd.DataFrame(one_hot_encoder.fit_transform(df[['Fuel Type', 'Seller Type']]))
df = pd.concat([df, encoded_df], axis=1)
df.drop(columns=['Fuel Type', 'Seller Type'], inplace=True)

# Ordinal Encoding
ordinal_encoder = OrdinalEncoder(categories=[["Manual", "Automatic"]])
df['Transmission'] = ordinal_encoder.fit_transform(df[['Transmission']])

# Binning
df['Price Category'] = pd.qcut(df['Selling_Price'], q=3, labels=False)

# Scaling Selling Price
df['Selling_Price'] = scaler.fit_transform(df[['Selling_Price']])

# Save processed data
df.to_csv("processed_data.csv", index=False)

# Prepare data for model
X = df.drop(['Car_Name', 'Selling_Price', 'Price Category'], axis=1)
y = df['Price Category']

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)
print("Number of testing rows:", X_test.shape[0])

# Initialize and train MLP classifier
mlp_classifier = MLPClassifier(hidden_layer_sizes=(100,), max_iter=1000)
mlp_classifier.fit(X_train, y_train)

# Predict and evaluate
y_pred = mlp_classifier.predict(X_test)
print("Hidden Layer Size:", mlp_classifier.hidden_layer_sizes)
print("Number of Layers:", mlp_classifier.n_layers_)
print("Number of Iterations:", mlp_classifier.n_iter_)
print("Classes:", mlp_classifier.classes_)

# Display accuracy and classification report
print("Accuracy:", accuracy_score(y_test, y_pred))
print(classification_report(y_test, y_pred))
